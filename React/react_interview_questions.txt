Q.1- Explain redux to a 5 year old (ELI5) ?
A - 
Q.2 - What is immutability?
A - Immutability is a concept that React programmers need to understand. An immutable value or object cannot be changed, so every update creates new value, leaving the old one untouched.

Q.3- What does Object.freeze() do?
A - Object.freeze() method freezes an object. A frozen object will not change, freezing an object prevents new properties to add into it and prevents from removing or altering the existing properties. Object.freeze() preserves the enumerability, configurability, writability and the prototype of the object. It returns the passed object and does not create a frozen copy.

const obj = {
  prop: 42
};

Object.freeze(obj);

obj.prop = 33;
// Throws an error in strict mode

console.log(obj.prop);
// expected output: 42


Q.4- Why is immutability required by Redux?
A - Immutability of redux state is necessary since it allows detecting redux state changes in an efficient manner. This implies that whenever we want to modify a redux state, we must create a new copy of it and do modifications to that copy - which then becomes the new redux state.
Q.5- How does Redux use shallow equality checking?
A - Redux uses shallow equality checking in its combineReducers function to return either a new mutated copy of the root state object, or, if no mutations have been made, the current root state object.
Q.6- How well does Redux “scale” in terms of performance and architecture?
A - he work done by Redux generally falls into a few areas: processing actions in middleware and reducers (including object duplication for immutable updates), notifying subscribers after actions are dispatched, and updating UI components based on the state changes. While it's certainly possible for each of these to become a performance concern in sufficiently complex situations, there's nothing inherently slow or inefficient about how Redux is implemented. In fact, React Redux in particular is heavily optimized to cut down on unnecessary re-renders, and React-Redux v5 shows noticeable improvements over earlier versions.
Redux may not be as efficient out of the box when compared to other libraries. For maximum rendering performance in a React application, state should be stored in a normalized shape, many individual components should be connected to the store instead of just a few, and connected list components should pass item IDs to their connected child list items (allowing the list items to look up their own data by ID). This minimizes the overall amount of rendering to be done. Use of memoized selector functions is also an important performance consideration.
As for architecture, anecdotal evidence is that Redux works well for varying project and team sizes. Redux is currently used by hundreds of companies and thousands of developers, with several hundred thousand monthly installations from NPM. One developer reported:

Q.7- How does Redux compare to the React Context API?
A - 
Context API
Redux
Built-in tool that ships with React
Additional installation Required, driving up the final bundle size
Requires minimal Setup
Requires extensive setup to integrate it with a React Application
Specifically designed for static data, that is not often refreshed or updated
Works like a charm with both static and dynamic data
Adding new contexts requires creation from scratch
Easily extendible due to the ease of adding new data/actions after the initial setup
Debugging can be hard in highly nested React Component Structure even with Dev Tool
Incredibly powerful Redux Dev Tools to ease debugging
UI logic and State Management Logic are in the same component
Better code organization with separate UI logic and State Management Logic


https://redux.js.org/faq/
Q.8- What is webpack ?
A - What is webpack and why it is used?
Webpack is a tool that lets you compile JavaScript modules, also known as module bundler. Given a large number of files, it generates a single file (or a few files) that run your app. It can perform many operations: helps you bundle your resources. watches for changes and re-runs the tasks
 
Or
 
At its core, webpack is a static module bundler for modern JavaScript applications. When webpack processes your application, it internally builds a dependency graph from one or more entry points and then combines every module your project needs into one or more bundles, which are static assets to serve your content from.
 

Q.9- What is treeshaking ?
A - Tree Shaking is a concept in development of eliminating dead code or unused code.
Imagine your application as a tree. All the libraries, components, widgets & code represents leaves. All the unused code, imports & dead code represents the dead brown leaves. In order to clear dead leaves from trees you have to shake the tree to let them fall.
By implementing tree shaking practices website performance will get improved and reduce bundle size. Tree shaking depends on the static structure of ES6 module syntax (import & export).
The reason tree shaking is very important is because most packages installed don’t really need all dependencies & this results in importing full packages, however what really needed is a small part of that package.

Q.10- What are some features of using webpack?
A - 
Entry
Output
Loaders
Plugins
Mode
Browser Compatibility
